// Generated by gencpp from file robot_control/defineGlobalPathRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_DEFINEGLOBALPATHREQUEST_H
#define ROBOT_CONTROL_MESSAGE_DEFINEGLOBALPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct defineGlobalPathRequest_
{
  typedef defineGlobalPathRequest_<ContainerAllocator> Type;

  defineGlobalPathRequest_()
    : x(0.0)
    , y(0.0)
    , destiny_x(0.0)
    , destiny_y(0.0)
    , cell_size(0.0)
    , map()  {
    }
  defineGlobalPathRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , destiny_x(0.0)
    , destiny_y(0.0)
    , cell_size(0.0)
    , map(_alloc)  {
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _destiny_x_type;
  _destiny_x_type destiny_x;

   typedef double _destiny_y_type;
  _destiny_y_type destiny_y;

   typedef float _cell_size_type;
  _cell_size_type cell_size;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _map_type;
  _map_type map;




  typedef boost::shared_ptr< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct defineGlobalPathRequest_

typedef ::robot_control::defineGlobalPathRequest_<std::allocator<void> > defineGlobalPathRequest;

typedef boost::shared_ptr< ::robot_control::defineGlobalPathRequest > defineGlobalPathRequestPtr;
typedef boost::shared_ptr< ::robot_control::defineGlobalPathRequest const> defineGlobalPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::defineGlobalPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robot_control': ['/home/rafael/SORS_Application/src/robot_control/msg', '/home/rafael/SORS_Application/devel/share/robot_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbf7a6b9b800b345bfced161666436e0";
  }

  static const char* value(const ::robot_control::defineGlobalPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbf7a6b9b800b345ULL;
  static const uint64_t static_value2 = 0xbfced161666436e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/defineGlobalPathRequest";
  }

  static const char* value(const ::robot_control::defineGlobalPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 destiny_x\n\
float64 destiny_y\n\
float32 cell_size\n\
char[] map\n\
";
  }

  static const char* value(const ::robot_control::defineGlobalPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.destiny_x);
      stream.next(m.destiny_y);
      stream.next(m.cell_size);
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct defineGlobalPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::defineGlobalPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::defineGlobalPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "destiny_x: ";
    Printer<double>::stream(s, indent + "  ", v.destiny_x);
    s << indent << "destiny_y: ";
    Printer<double>::stream(s, indent + "  ", v.destiny_y);
    s << indent << "cell_size: ";
    Printer<float>::stream(s, indent + "  ", v.cell_size);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_DEFINEGLOBALPATHREQUEST_H
