// Generated by gencpp from file robot_control/getPositionsRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_GETPOSITIONSREQUEST_H
#define ROBOT_CONTROL_MESSAGE_GETPOSITIONSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct getPositionsRequest_
{
  typedef getPositionsRequest_<ContainerAllocator> Type;

  getPositionsRequest_()
    : my_x(0.0)
    , my_y(0.0)
    , my_id(0)
    , has_id(false)  {
    }
  getPositionsRequest_(const ContainerAllocator& _alloc)
    : my_x(0.0)
    , my_y(0.0)
    , my_id(0)
    , has_id(false)  {
    }



   typedef double _my_x_type;
  _my_x_type my_x;

   typedef double _my_y_type;
  _my_y_type my_y;

   typedef int32_t _my_id_type;
  _my_id_type my_id;

   typedef uint8_t _has_id_type;
  _has_id_type has_id;




  typedef boost::shared_ptr< ::robot_control::getPositionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::getPositionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct getPositionsRequest_

typedef ::robot_control::getPositionsRequest_<std::allocator<void> > getPositionsRequest;

typedef boost::shared_ptr< ::robot_control::getPositionsRequest > getPositionsRequestPtr;
typedef boost::shared_ptr< ::robot_control::getPositionsRequest const> getPositionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::getPositionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::getPositionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robot_control': ['/home/rafael/SORS_Application/src/robot_control/msg', '/home/rafael/SORS_Application/devel/share/robot_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::getPositionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::getPositionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::getPositionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::getPositionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::getPositionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::getPositionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::getPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a562eb3cc9a2302cde6a2dd2a95afa3";
  }

  static const char* value(const ::robot_control::getPositionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a562eb3cc9a2302ULL;
  static const uint64_t static_value2 = 0xcde6a2dd2a95afa3ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::getPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/getPositionsRequest";
  }

  static const char* value(const ::robot_control::getPositionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::getPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 my_x\n\
float64 my_y\n\
int32 my_id\n\
bool has_id\n\
";
  }

  static const char* value(const ::robot_control::getPositionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::getPositionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.my_x);
      stream.next(m.my_y);
      stream.next(m.my_id);
      stream.next(m.has_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct getPositionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::getPositionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::getPositionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "my_x: ";
    Printer<double>::stream(s, indent + "  ", v.my_x);
    s << indent << "my_y: ";
    Printer<double>::stream(s, indent + "  ", v.my_y);
    s << indent << "my_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_id);
    s << indent << "has_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_GETPOSITIONSREQUEST_H
