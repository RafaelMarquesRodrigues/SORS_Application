# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control/addToMapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class addToMapRequest(genpy.Message):
  _md5sum = "4342df1428001f4b7aff723e4008c5a5"
  _type = "robot_control/addToMapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 start_x
float64 start_y
float64 wall_x
float64 wall_y
float64 inc_x
float64 inc_y
float64 range

"""
  __slots__ = ['start_x','start_y','wall_x','wall_y','inc_x','inc_y','range']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_x,start_y,wall_x,wall_y,inc_x,inc_y,range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(addToMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_x is None:
        self.start_x = 0.
      if self.start_y is None:
        self.start_y = 0.
      if self.wall_x is None:
        self.wall_x = 0.
      if self.wall_y is None:
        self.wall_y = 0.
      if self.inc_x is None:
        self.inc_x = 0.
      if self.inc_y is None:
        self.inc_y = 0.
      if self.range is None:
        self.range = 0.
    else:
      self.start_x = 0.
      self.start_y = 0.
      self.wall_x = 0.
      self.wall_y = 0.
      self.inc_x = 0.
      self.inc_y = 0.
      self.range = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.start_x, _x.start_y, _x.wall_x, _x.wall_y, _x.inc_x, _x.inc_y, _x.range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.start_x, _x.start_y, _x.wall_x, _x.wall_y, _x.inc_x, _x.inc_y, _x.range,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.start_x, _x.start_y, _x.wall_x, _x.wall_y, _x.inc_x, _x.inc_y, _x.range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.start_x, _x.start_y, _x.wall_x, _x.wall_y, _x.inc_x, _x.inc_y, _x.range,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control/addToMapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class addToMapResponse(genpy.Message):
  _md5sum = "db18cd4751bf648d25e6235126cead94"
  _type = "robot_control/addToMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool added

"""
  __slots__ = ['added']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       added

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(addToMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.added is None:
        self.added = False
    else:
      self.added = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.added))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.added,) = _struct_B.unpack(str[start:end])
      self.added = bool(self.added)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.added))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.added,) = _struct_B.unpack(str[start:end])
      self.added = bool(self.added)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class addToMap(object):
  _type          = 'robot_control/addToMap'
  _md5sum = 'b0f29972a30c9830b340e4bab99692b0'
  _request_class  = addToMapRequest
  _response_class = addToMapResponse
